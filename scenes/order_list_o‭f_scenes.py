### Reads in a CSV generated by search_scenes.py and orders them for download to the desired location



# CSV file containing list of image IDs
ids_file_path = './seki_img_ids.csv'

# GEOJSON file containing the AOI; imagery will be clipped to this extent
geojson_path = './seki_bb.geojson'

# Directory to download imagery to
output_directory = 'E:/sequoia_kings_canyon/L1_harmonized_scenes'



import datetime
import json
import os
import requests
import time
import pandas as pd
from requests.auth import HTTPBasicAuth

# Read in the CSV file containing the list of image IDs
ids_file = pd.read_csv(ids_file_path)
ids = ids_file['Image_IDs'].tolist()

# Read in the AOI file
with open(geojson_path) as f:
    geometry = json.load(f)


# Takes in image ID string, outputs download link
def order_list_of_imgs(id_list, order_name='List of Images Order'):
    # Check which images already exist in the output directory
    original_length = len(id_list)
    existing_files = os.listdir(output_directory)
    existing_ids = [file.split('_')[0] for file in existing_files]
    id_list = [id for id in id_list if id not in existing_ids]
    if len(id_list) < original_length:
        print('Found ' + str(original_length - len(id_list)) + ' images that already exist in the output directory. Skipping...')
    print('Ordering ' + str(len(id_list)) + ' images...')
    # Order body to be sent over HTTP request
    request_body = {
       "name": order_name,
       "source_type": "scenes",
       "products":[
          {
             "item_ids": id_list,
             "item_type":"PSScene",
             "product_bundle":"analytic_sr_udm2"
          }
       ],
         "tools": [
            {
                "clip": {
                    "aoi": {
                        "type": "Polygon",
                        "coordinates": geometry['features'][0]['geometry']['coordinates']
                    }
                    },         
            },
            {
                "harmonize": {
                    "target_sensor": {
                        "target_sensor": "Sentinel-2"
                    }
                }, 
            }
         ]
    }
    result = \
      requests.post(
        'https://api.planet.com/compute/ops/orders/v2',
        auth=HTTPBasicAuth(os.environ['PL_API_KEY'], ''),
        json=request_body)
    return result.json()['_links']['_self']


# Get the state of an order using the link
# Possible values: queued, running, success, partial, failed, cancelled
def check_on_order(link):
    result = requests.get(link, auth=HTTPBasicAuth(os.environ['PL_API_KEY'], ''))
    return result.json()['state']


# Downloads all scenes at a given search result link to the local directory
def order_all_scenes(link):
    result = requests.get(link, auth=HTTPBasicAuth(os.environ['PL_API_KEY'], '')).json()
    files = result['_links']['results']
    for file in files:
        filename = file['name'].split('/')[-1]
        print('Downloading ' + filename + '...')
        r = requests.get(file['location'], auth=HTTPBasicAuth(os.environ['PL_API_KEY'], ''))
        with open(os.path.join(output_directory,filename),'wb') as f:
            f.write(r.content)

# Waits for an order to be ready and then starts downloading imagery
def download_order(link):
    result = requests.get(link, auth=HTTPBasicAuth(os.environ['PL_API_KEY'], ''))
    state = result.json()['state']
    isDone = False
    while isDone==False:
        if state=='queued':
            time.sleep(1)
            result = requests.get(link, auth=HTTPBasicAuth(os.environ['PL_API_KEY'], ''))
            state = result.json()['state']
        elif state=='running':
            try:
                result = requests.get(link, auth=HTTPBasicAuth(os.environ['PL_API_KEY'], ''))
                print(datetime.datetime.now().time(), '  ', str(result.json()['last_message'])+'...')
            except KeyError: # sometimes state isn't in the returned json for some reason
                time.sleep(5)
                continue
            state = result.json()['state']
            time.sleep(5)
        elif state=='success':
            print('All scenes processed successfully. Now beginning download...')
            order_all_scenes(link)
            isDone=True
        elif state=='partial':
            isDone=True
        elif state=='failed':
            isDone=True
        elif state=='cancelled':
            isDone=True


# Liftoff!
this_link = order_list_of_imgs(ids)
download_order(this_link)

